Version 1.0:

* Finish reference documentation (HTML format)
  - Document timers

* check for uses of sigprocmask, use pthread_sigmask when required.

Later:

* STOP rearm for timers. Instead of just disabling a timer, actually stop (but don't deallocate) it.

* Use C++ standard library functions to get time (system time and monotonic time). Works on OS X, apparently,
  even when clock_gettime is not available. Use clock_gettime when available however as it may well have
  higher precision.

* Support disabling signal watchers? Issue currently is that signals are consumed by the event loop before
  watcher is enqueued, therefore a naive disable would actually lose signals. Probably should allow
  re-enable with and without flushing currently queued signals; might require that the signal actually
  be retrieved by the dispatch function.

* More tests.

* Maybe use pdfork on FreeBSD? allows safely signalling children without a mutex.
  However, requires an fd per child.

* User notification mechanism (add a watch to the event loop which can be signalled manually).

* kqueue: use EVDISPATCH where available. On OS X, potentially use EVDISPATCH2 (which potentially
  also allows removing the wait lock, though this is obviously considerable work).

* poll() (i.e. "pure POSIX") backend?

* Current deregister implementation gets attention lock and issues delete. An alternative would be
  to test-acquire the attention lock and on failure, instead add the watcher to a queue and signal
  the current waiter (without waiting to acquire attention lock in *this* thread). On wake from
  waiting a thread would have to check the deregistration queue.

* Queue up multiple enable/disable commands to backends that support being issued commands in bulk
  (ie kqueue but not epoll), rather than issuing them individually. Needs care to determine when
  this can be done.

* Cache current clock times. The API allows for this but it hasn't been implemented.

* Use eventfd (when available) as interrupt mechanism instead of a pipe.

* base_watcher heap handle: does it contain a reference (pointer) to the base_watcher? Can this
  be removed? (perhaps conditionally depending on the chosen queue implementation)

* Event loop construction with eg child_proc and itimer masks two signals separately. This could
  be combined into a single operation.

